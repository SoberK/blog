{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{364:function(o,i,t){\"use strict\";t.r(i);var p=t(14),n=Object(p.a)({},(function(){var o=this,i=o._self._c;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":o.$parent.slotKey}},[i(\"h3\",{attrs:{id:\"_49-compositonapi和optionapi的区别\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_49-compositonapi和optionapi的区别\"}},[o._v(\"#\")]),o._v(\" 49.compositonApi和optionApi的区别\")]),o._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[o._v(\"总述不同点\")])]),o._v(\" \"),i(\"li\",[i(\"p\",[o._v(\"开发动机\")])]),o._v(\" \"),i(\"li\",[i(\"p\",[o._v(\"如何选择\")])]),o._v(\" \"),i(\"li\",[i(\"p\",[o._v(\"composition APT是一组API，包括：Reactivity APl、生命周期钩子、依赖注入，使用户可以通过导入函数方式编写vue组件。而 options APT 则通过声明组件遊项的对象开子式编写组件。\")])]),o._v(\" \"),i(\"li\",[i(\"p\",[o._v(\"composition API°最主要作用是能够简洁、高效复用逻辑。解决了过去 options APT °中 mixins的各种缺点：另外 Composition API 具有更加敏捷的代码组织能力，很多用户喜欢Options API°，认为所有东西都有固定位置的选项放置代码，但是单个组件增长过大之后这反而成为限制，一个逻辑关注点分散在组件各处，形成代码碎片，“维护时需要反复横跳，Composition API°则可以将它们有效组织在一起。最后composition APT°拥有更好的类型推断，对ts支持更友好， Options API在设计之初并末考虑类型推断因素，虽然官方为此做了很多复杂的类型体操，确保用户可以在使用 0ptions API 时获得类型推断，然而还是没办法用在mixins和provide/inject 上。\")])]),o._v(\" \"),i(\"li\",[i(\"p\",[o._v(\"vue3首推 Composition API°，但是这会让我们在代码组织上多花点心思，因此在选择上，如果我们项目属于中低复杂度的场景，‘options API°仍是一个好选择。对于那些大型，高扩展，强维护的项目上，composition Apf会获得更大收益。\")])])])])}),[],!1,null,null,null);i.default=n.exports}}]);","extractedComments":[]}