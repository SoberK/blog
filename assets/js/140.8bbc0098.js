(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{425:function(t,a,s){"use strict";s.r(a);var _=s(14),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"网络篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络篇"}},[t._v("#")]),t._v(" 网络篇")]),t._v(" "),a("h2",{attrs:{id:"加载一个网页通常经历以下步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载一个网页通常经历以下步骤"}},[t._v("#")]),t._v(" 加载一个网页通常经历以下步骤")]),t._v(" "),a("ol",[a("li",[t._v("解析 URL： 首先，浏览器会解析输入的 URL，确定协议（如 HTTP 或 HTTPS）、主机名、端口号和路径等信息。")]),t._v(" "),a("li",[t._v("DNS 解析： 浏览器会检查缓存中是否有该网址的 IP 地址，如果没有，则向 DNS 服务器发送请求以获取该网址的 IP 地址。")]),t._v(" "),a("li",[t._v("建立 TCP 连接： 浏览器通过 IP 地址和端口号与服务器建立 TCP 连接，通过三次握手确立连接。")]),t._v(" "),a("li",[t._v("发起 HTTP 请求： 浏览器向服务器发送一个 HTTP 请求，请求包括需要的资源类型（HTML、CSS、JavaScript 等）和其他参数。")]),t._v(" "),a("li",[t._v("服务器处理请求并返回响应： 服务器收到请求后，根据请求的内容进行处理，并将相应的资源返回给浏览器。")]),t._v(" "),a("li",[t._v("浏览器渲染页面： 浏览器接收到服务器返回的 HTML、CSS 和 JavaScript 等资源后，进行页面解析，构建 DOM 树（文档对象模型）、CSSOM 树（CSS 对象模型）和 JavaScript 引擎会处理 JavaScript 代码，并生成渲染树。")]),t._v(" "),a("li",[t._v("页面渲染： 浏览器根据生成的渲染树开始绘制页面，计算每个元素的位置和大小，并将页面呈现给用户。")]),t._v(" "),a("li",[t._v("页面加载完成： 所有资源都加载完成后，页面被完全渲染，并触发 load 事件。")])]),t._v(" "),a("h2",{attrs:{id:"请求的方式有几种-并说说他们的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求的方式有几种-并说说他们的异同"}},[t._v("#")]),t._v(" 请求的方式有几种，并说说他们的异同")]),t._v(" "),a("p",[t._v("请求的方式： 主要有 GET、POST、PUT、DELETE 等。它们的主要区别在于：")]),t._v(" "),a("ul",[a("li",[t._v("GET： 用于从服务器获取数据，请求的参数会附加在 URL 中，有长度限制，不适合传输敏感信息。")]),t._v(" "),a("li",[t._v("POST： 用于向服务器提交数据，请求的参数会作为请求体传输，没有长度限制，适合传输敏感信息。")]),t._v(" "),a("li",[t._v("PUT： 用于更新资源，类似于 POST，但是一般用于更新整个资源。")]),t._v(" "),a("li",[t._v("DELETE： 用于删除服务器上的资源。")]),t._v(" "),a("li",[t._v("head：类似于 get 请求，只不过返回的响应中没有具体的内容，用户获取报头")]),t._v(" "),a("li",[t._v("options：允许客户端查看服务器的性能，比如说服务器支持的请求方式等等。")])]),t._v(" "),a("h3",{attrs:{id:"_1-get-请求传参长度的误区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-get-请求传参长度的误区"}},[t._v("#")]),t._v(" 1. get 请求传参长度的误区")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。")])]),t._v("\n实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或 web 服务器，浏览器或 web 服务器限制了 url 的长度。为了明确这个概念，我们必须再次强调下面几点:")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 协议 未规定 GET 和 POST 的长度限制")]),t._v(" "),a("li",[t._v("GET 的最大长度显示是因为 浏览器和 web 服务器限制了 URI 的长度")]),t._v(" "),a("li",[t._v("不同的浏览器和 WEB 服务器，限制的最大长度不一样")]),t._v(" "),a("li",[t._v("要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte")])]),t._v(" "),a("h3",{attrs:{id:"_2-补充-get-和-post-请求在缓存方面的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-补充-get-和-post-请求在缓存方面的区别"}},[t._v("#")]),t._v(" 2. 补充 get 和 post 请求在缓存方面的区别")]),t._v(" "),a("p",[t._v("post/get 的请求区别，具体不再赘述。")]),t._v(" "),a("p",[t._v("补充补充一个 get 和 post 在缓存方面的区别：")]),t._v(" "),a("ul",[a("li",[t._v("get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。")]),t._v(" "),a("li",[t._v("post 不同，post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此 get 请求适合于请求缓存。")])]),t._v(" "),a("h2",{attrs:{id:"什么情况算是跨域-如何解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况算是跨域-如何解决跨域问题"}},[t._v("#")]),t._v(" 什么情况算是跨域？如何解决跨域问题？")]),t._v(" "),a("p",[t._v("跨域问题与解决方法： 当发起请求的页面与请求的资源不在同一个域下时就会发生跨域问题。主要的解决方法包括：")]),t._v(" "),a("ul",[a("li",[t._v("JSONP： 利用 "),a("code",[t._v("<script>")]),t._v(" 标签的跨域特性，缺点是只能发送 GET 请求。")]),t._v(" "),a("li",[t._v("CORS（跨域资源共享）： 在服务端设置响应头来允许跨域请求。")]),t._v(" "),a("li",[t._v("代理： 在同源服务器上设置代理，将请求转发到目标服务器。")]),t._v(" "),a("li",[t._v("使用 iframe 或者 postMessage： 通过在不同域之间嵌套页面或者使用 postMessage 方法进行通信。")])]),t._v(" "),a("h2",{attrs:{id:"http-和-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https"}},[t._v("#")]),t._v(" http 和 https")]),t._v(" "),a("p",[a("strong",[a("em",[t._v("https 的 SSL 加密是在传输层实现的。")])])]),t._v(" "),a("h3",{attrs:{id:"_1-http-和-https-的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-和-https-的基本概念"}},[t._v("#")]),t._v(" (1)http 和 https 的基本概念")]),t._v(" "),a("p",[t._v("http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。")]),t._v(" "),a("p",[t._v("https: 是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版，即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。")]),t._v(" "),a("p",[t._v("https 协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。")]),t._v(" "),a("h3",{attrs:{id:"_2-http-和-https-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-和-https-的区别"}},[t._v("#")]),t._v(" (2)http 和 https 的区别？")]),t._v(" "),a("p",[t._v("http 传输的数据都是未加密的，也就是明文的，网景公司设置了 SSL 协议来对 http 协议传输的数据进行加密处理，简单来说 https 协议是由 http 和 ssl 协议构建的可进行加密传输和身份认证的网络协议，比 http 协议的安全性更高。 主要的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("Https 协议需要 ca 证书，费用较高。")]),t._v(" "),a("li",[t._v("http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。")]),t._v(" "),a("li",[t._v("使用不同的链接方式，端口也不同，一般而言，http 协议的端口为 80，https 的端口为 443")]),t._v(" "),a("li",[t._v("http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。")])]),t._v(" "),a("h3",{attrs:{id:"_3-https-协议的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-https-协议的工作原理"}},[t._v("#")]),t._v(" (3)https 协议的工作原理")]),t._v(" "),a("p",[t._v("客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤，如图所示。")]),t._v(" "),a("ul",[a("li",[t._v("客户使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。")]),t._v(" "),a("li",[t._v("web 服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。")]),t._v(" "),a("li",[t._v("客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。")]),t._v(" "),a("li",[t._v("客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。")]),t._v(" "),a("li",[t._v("web 服务器通过自己的私钥解密出会话密钥。")]),t._v(" "),a("li",[t._v("web 服务器通过会话密钥加密与客户端之间的通信。")])]),t._v(" "),a("h3",{attrs:{id:"_4-https-协议的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-https-协议的优点"}},[t._v("#")]),t._v(" (4)https 协议的优点")]),t._v(" "),a("ul",[a("li",[t._v("使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；")]),t._v(" "),a("li",[t._v("HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。")]),t._v(" "),a("li",[t._v("HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。")]),t._v(" "),a("li",[t._v("谷歌曾在 2014 年 8 月份调整搜索引擎算法，并称“比起同等 HTTP 网站，采用 HTTPS 加密的网站在搜索结果中的排名将会更高”。")])]),t._v(" "),a("h3",{attrs:{id:"_5-https-协议的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-https-协议的缺点"}},[t._v("#")]),t._v(" (5)https 协议的缺点")]),t._v(" "),a("ul",[a("li",[t._v("https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。")]),t._v(" "),a("li",[t._v("https 缓存不如 http 高效，会增加数据开销。")]),t._v(" "),a("li",[t._v("SSL 证书也需要钱，功能越强大的证书费用越高。")]),t._v(" "),a("li",[t._v("SSL 证书需要绑定 IP，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。")])]),t._v(" "),a("h2",{attrs:{id:"http2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),a("p",[t._v("首先补充一下，http 和 https 的区别，相比于 http,https 是基于 ssl 加密的 http 协议 简要概括：http2.0 是基于 1999 年发布的 http1.0 之后的首次更新。")]),t._v(" "),a("ul",[a("li",[t._v("提升访问速度（可以对于，请求资源所需时间更少，访问速度更快，相比 http1.0）")]),t._v(" "),a("li",[t._v("允许多路复用：多路复用允许同时通过单一的 HTTP/2 连接发送多重请求-响应信息。改善了：在 http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞。")]),t._v(" "),a("li",[t._v("二进制分帧：HTTP2.0 会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码")]),t._v(" "),a("li",[t._v("首部压缩")]),t._v(" "),a("li",[t._v("服务器端推送")])]),t._v(" "),a("h2",{attrs:{id:"tcp-三次握手-一句话概括"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手-一句话概括"}},[t._v("#")]),t._v(" tcp 三次握手，一句话概括")]),t._v(" "),a("p",[a("strong",[a("em",[t._v("客户端和服务端都需要直到各自可收发，因此需要三次握手。")])])]),t._v(" "),a("p",[t._v("简化三次握手：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/7/10/16484133eee33c76~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"2018-07-10 3 42 11"}})]),t._v(" "),a("p",[t._v("从图片可以得到三次握手可以简化为：C 发起请求连接 S 确认，也发起连接 C 确认我们再看看每次握手的作用：第一次握手：S 只可以确认 自己可以接受 C 发送的报文段第二次握手：C 可以确认 S 收到了自己发送的报文段，并且可以确认 自己可以接受 S 发送的报文段第三次握手：S 可以确认 C 收到了自己发送的报文段")]),t._v(" "),a("h2",{attrs:{id:"tcp-和-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[t._v("#")]),t._v(" TCP 和 UDP 的区别")]),t._v(" "),a("p",[t._v("（1）TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接。")]),t._v(" "),a("p",[t._v("（2）TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付。 并且因为 tcp 可靠，面向连接，不会丢失数据因此适合大数据量的交换。")]),t._v(" "),a("p",[t._v("（3）TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低（因此会出现丢包，对实时的应用比如 IP 电话和视频会议等）。")]),t._v(" "),a("p",[t._v("（4）TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多。")]),t._v(" "),a("p",[t._v("（5）TCP 的首部较大为 20 字节，而 UDP 只有 8 字节。")]),t._v(" "),a("p",[t._v("（6）TCP 是面向连接的可靠性传输，而 UDP 是不可靠的。")]),t._v(" "),a("h2",{attrs:{id:"websocket-的实现和应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的实现和应用"}},[t._v("#")]),t._v(" WebSocket 的实现和应用")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是-websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-websocket"}},[t._v("#")]),t._v(" (1)什么是 WebSocket?")]),t._v(" "),a("p",[t._v("WebSocket 是 HTML5 中的协议，支持持久连续，http 协议不支持持久性连接。Http1.0 和 HTTP1.1 都不支持持久性的链接，HTTP1.1 中的 keep-alive，将多个 http 请求合并为 1 个")]),t._v(" "),a("h3",{attrs:{id:"_2-websocket-是什么样的协议-具体有什么优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-websocket-是什么样的协议-具体有什么优点"}},[t._v("#")]),t._v(" (2)WebSocket 是什么样的协议，具体有什么优点？")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 的生命周期通过 Request 来界定，也就是 Request 一个 Response，那么在 Http1.0 协议中，这次 Http 请求就结束了。在 Http1.1 中进行了改进，是的有一个 connection：Keep-alive，也就是说，在一个 Http 连接中，可以发送多个 Request，接收多个 Response。但是必须记住，在 Http 中一个 Request 只能对应有一个 Response，而且这个 Response 是被动的，不能主动发起。")]),t._v(" "),a("li",[t._v("WebSocket 是基于 Http 协议的，或者说借用了 Http 协议来完成一部分握手，在握手阶段与 Http 是相同的。我们来看一个 websocket 握手协议的实现，基本是 2 个属性，upgrade，connection。")])]),t._v(" "),a("p",[t._v("基本请求如下：")]),t._v(" "),a("p",[t._v("http")]),t._v(" "),a("p",[a("code",[t._v("GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw== Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13 Origin: http://example.com")])]),t._v(" "),a("p",[t._v("多了下面 2 个属性：")]),t._v(" "),a("p",[t._v("avrasm")]),t._v(" "),a("p",[a("code",[t._v("Upgrade:webSocket Connection:Upgrade 告诉服务器发送的是websocket Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw== Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13")])]),t._v(" "),a("h2",{attrs:{id:"一个图片-url-访问后直接下载怎样实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个图片-url-访问后直接下载怎样实现"}},[t._v("#")]),t._v(" 一个图片 url 访问后直接下载怎样实现？")]),t._v(" "),a("ul",[a("li",[t._v("new 一个 blob 对象")]),t._v(" "),a("li",[t._v("创建一个 url 对象")]),t._v(" "),a("li",[t._v("创建 a 标签设置 url，以及 donwload 名称")]),t._v(" "),a("li",[t._v("js 添加到页面中，并且点击")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" blob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Blob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" href "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createObjectURL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("download "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fileName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" href"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("click")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"几个很实用的-bom-属性对象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几个很实用的-bom-属性对象方法"}},[t._v("#")]),t._v(" 几个很实用的 BOM 属性对象方法?")]),t._v(" "),a("p",[t._v("什么是 Bom? Bom 是浏览器对象。有哪些常用的 Bom 属性呢？")]),t._v(" "),a("h3",{attrs:{id:"_1-location-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-location-对象"}},[t._v("#")]),t._v(" (1)location 对象")]),t._v(" "),a("ul",[a("li",[t._v("location.href 返回或设置完整的 URL。改变这个属性会导致浏览器加载新的页面。")]),t._v(" "),a("li",[t._v("location.search 返回 URL 的查询部分（包括问号），即问号后面的参数部分。")]),t._v(" "),a("li",[t._v("location.hash #号后面的部分")]),t._v(" "),a("li",[t._v("location.host 返回 URL 的主机名和端口号（如果有）。")]),t._v(" "),a("li",[t._v("location.hostname 返回 URL 的主机名，不包括端口号")]),t._v(" "),a("li",[t._v("location.pathname 主机名之后，查询参数之前")]),t._v(" "),a("li",[t._v("location.port 返回 URL 的端口号。")]),t._v(" "),a("li",[t._v("location.protocol 协议部分")]),t._v(" "),a("li",[t._v("location.assign(url) 加载新的页面，并在浏览器历史记录中增加一个新条目")]),t._v(" "),a("li",[t._v("location.replace(url) 加载新的页面，但不会在浏览器历史记录中增加新条目。即用新页面替换当前页面。")]),t._v(" "),a("li",[t._v("location.reload() 重新加载当前页面。可以选择是否强制从服务器重新加载页面。")])]),t._v(" "),a("h3",{attrs:{id:"_2-history-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-history-对象"}},[t._v("#")]),t._v(" (2)history 对象")]),t._v(" "),a("ul",[a("li",[t._v("history.go() -- 前进或后退指定的页面数 history.go(num);")]),t._v(" "),a("li",[t._v("history.back() -- 后退一页")]),t._v(" "),a("li",[t._v("history.forward() -- 前进一页")])]),t._v(" "),a("h3",{attrs:{id:"_3-navigator-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-navigator-对象"}},[t._v("#")]),t._v(" (3)Navigator 对象")]),t._v(" "),a("ul",[a("li",[t._v("navigator.userAgent -- 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)")]),t._v(" "),a("li",[t._v("navigator.cookieEnabled -- 返回浏览器是否支持(启用)cookie")])]),t._v(" "),a("h2",{attrs:{id:"_400-和-401、403-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_400-和-401、403-状态码"}},[t._v("#")]),t._v(" 400 和 401、403 状态码")]),t._v(" "),a("h3",{attrs:{id:"_1-400-状态码-请求无效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-400-状态码-请求无效"}},[t._v("#")]),t._v(" (1)400 状态码：请求无效")]),t._v(" "),a("p",[t._v("产生原因：")]),t._v(" "),a("ul",[a("li",[t._v("前端提交数据的字段名称和字段类型与后台的实体没有保持一致")]),t._v(" "),a("li",[t._v("前端提交到后台的数据应该是 json 字符串类型，但是前端没有将对象 JSON.stringify 转化成字符串。")])]),t._v(" "),a("p",[t._v("解决方法：")]),t._v(" "),a("ul",[a("li",[t._v("对照字段的名称，保持一致性")]),t._v(" "),a("li",[t._v("将 obj 对象通过 JSON.stringify 实现序列化")])]),t._v(" "),a("h3",{attrs:{id:"_2-401-状态码-当前请求需要用户验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-401-状态码-当前请求需要用户验证"}},[t._v("#")]),t._v(" (2)401 状态码：当前请求需要用户验证")]),t._v(" "),a("h3",{attrs:{id:"_3-403-状态码-服务器已经得到请求-但是拒绝执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-403-状态码-服务器已经得到请求-但是拒绝执行"}},[t._v("#")]),t._v(" (3)403 状态码：服务器已经得到请求，但是拒绝执行")]),t._v(" "),a("h2",{attrs:{id:"fetch-发送-2-次请求的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fetch-发送-2-次请求的原因"}},[t._v("#")]),t._v(" fetch 发送 2 次请求的原因")]),t._v(" "),a("p",[a("strong",[a("em",[t._v("fetch 发送 post 请求的时候，总是发送 2 次，第一次状态码是 204，第二次才成功？")])])]),t._v(" "),a("p",[t._v("原因很简单，因为你用 fetch 的 post 请求的时候，导致 fetch 第一次发送了一个 Options 请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求。")]),t._v(" "),a("h2",{attrs:{id:"cookie-如何防范-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-如何防范-xss-攻击"}},[t._v("#")]),t._v(" Cookie 如何防范 XSS 攻击")]),t._v(" "),a("p",[t._v("XSS（跨站脚本攻击）是指攻击者在返回的 HTML 中嵌入 javascript 脚本，为了减轻这些攻击，需要在 HTTP 头部配上，set-cookie：")]),t._v(" "),a("ul",[a("li",[t._v("httponly-这个属性可以防止 XSS,它会禁止 javascript 脚本来访问 cookie。")]),t._v(" "),a("li",[t._v("secure - 这个属性告诉浏览器仅在请求为 https 的时候发送 cookie。")])]),t._v(" "),a("p",[t._v("结果应该是这样的：Set-Cookie=.....")]),t._v(" "),a("h2",{attrs:{id:"前端有哪些页面优化方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端有哪些页面优化方法"}},[t._v("#")]),t._v(" 前端有哪些页面优化方法?")]),t._v(" "),a("ul",[a("li",[t._v("减少 HTTP 请求数")]),t._v(" "),a("li",[t._v("从设计实现层面简化页面")]),t._v(" "),a("li",[t._v("合理设置 HTTP 缓存")]),t._v(" "),a("li",[t._v("资源合并与压缩")]),t._v(" "),a("li",[t._v("合并 CSS 图片，减少请求数的又一个好办法。")]),t._v(" "),a("li",[t._v("将外部脚本置底（将脚本内容在页面信息内容加载后再加载）")]),t._v(" "),a("li",[t._v("多图片网页使用图片懒加载。")]),t._v(" "),a("li",[t._v("在 js 中尽量减少闭包的使用")]),t._v(" "),a("li",[t._v("尽量合并 css 和 js 文件")]),t._v(" "),a("li",[t._v("尽量使用字体图标或者 SVG 图标，来代替传统的 PNG 等格式的图片")]),t._v(" "),a("li",[t._v("减少对 DOM 的操作")]),t._v(" "),a("li",[t._v("在 JS 中避免“嵌套循环”和 “死循环”")]),t._v(" "),a("li",[t._v("尽可能使用事件委托（事件代理）来处理事件绑定的操作")])]),t._v(" "),a("h2",{attrs:{id:"ajax-的状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax-的状态码"}},[t._v("#")]),t._v(" ajax 的状态码")]),t._v(" "),a("ul",[a("li",[t._v("200 : 代表请求成功；")]),t._v(" "),a("li",[t._v("301 : 永久重定向；")]),t._v(" "),a("li",[t._v("302: 临时转移")]),t._v(" "),a("li",[t._v("304 : 读取缓存 [表示浏览器端有缓存，并且服务端未更新，不再向服务端请求资源]")]),t._v(" "),a("li",[t._v("400 :数据/格式错误")]),t._v(" "),a("li",[t._v("401: 权限不够；（身份不合格，访问网站的时候，登录和不登录是不一样的）")]),t._v(" "),a("li",[t._v("404 : 路径错误，找不到文件")]),t._v(" "),a("li",[t._v("500 : 服务器的问题")]),t._v(" "),a("li",[t._v("503: 超负荷；")])]),t._v(" "),a("h2",{attrs:{id:"移动端兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移动端兼容"}},[t._v("#")]),t._v(" 移动端兼容")]),t._v(" "),a("ul",[a("li",[t._v("给移动端添加点击事件会有 300S 的延迟 fastclick")]),t._v(" "),a("li",[t._v('ios “-” 换成 "/"')]),t._v(" "),a("li",[t._v("ios search 长度兼容")]),t._v(" "),a("li",[t._v("刘海屏和底部安全区域"),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding-top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safe-area-inset-top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Older iOS */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding-top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safe-area-inset-top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Newer iOS */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding-bottom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safe-area-inset-bottom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Older iOS */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding-bottom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safe-area-inset-bottom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Newer iOS */")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"正向代理和反向代理的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理和反向代理的区别"}},[t._v("#")]),t._v(" 正向代理和反向代理的区别")]),t._v(" "),a("p",[t._v("正向代理代理的是客户端，对客户端负责\n反向单例代理的是服务端，对服务端负责")]),t._v(" "),a("p",[t._v("正向代理：")]),t._v(" "),a("ul",[a("li",[t._v("科学上网")]),t._v(" "),a("li",[t._v("加速访问")]),t._v(" "),a("li",[t._v("缓存数据")]),t._v(" "),a("li",[t._v("授权访问")]),t._v(" "),a("li",[t._v("影藏访问者")])]),t._v(" "),a("p",[t._v("反向代理：")]),t._v(" "),a("ul",[a("li",[t._v("保护服务器")]),t._v(" "),a("li",[t._v("负载均衡")])])])}),[],!1,null,null,null);a.default=v.exports}}]);