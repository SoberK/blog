(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{417:function(v,_,t){"use strict";t.r(_);var l=t(14),D=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"_9-虚拟-dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-虚拟-dom"}},[v._v("#")]),v._v(" 9.虚拟 dom")]),v._v(" "),_("p",[v._v("虚拟 DOM 是一种编程概念，旨在提高渲染性能和编程效率的一种技术手段。它本质上是一个在"),_("code",[v._v("内存中的轻量级 DOM 节点树")]),v._v("的表示，从而能够以最少的开销对实际的浏览器 DOM 进行更新。")]),v._v(" "),_("p",[v._v("template到虚拟dom的过程：在vue构建的时候。模版将会被编译器转换成")]),v._v(" "),_("p",[v._v("关键点解释")]),v._v(" "),_("p",[v._v("虚拟 DOM 的机制：")]),v._v(" "),_("ul",[_("li",[v._v("创建虚拟 DOM：当组件需要更新时，框架首先会在内存中创建一个虚拟 DOM 树，它是对实际 DOM 的一个抽象表示。这也是一个 JavaScript 对象。")]),v._v(" "),_("li",[v._v("更新虚拟 DOM：在组件状态或属性变化时，框架会生成新的虚拟 DOM 树并与上一次的虚拟 DOM 树进行比较。")]),v._v(" "),_("li",[v._v("Diff 算法：框架使用高效的 Diff 算法对新旧虚拟 DOM 树进行比较，找出精确的更改部分。")]),v._v(" "),_("li",[v._v("批量更新：最终，将这些更改部分批量应用到实际的 DOM 上，而不是在每次状态或属性变化时都直接操作 DOM。")])]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("性能优化：通过减少直接操作 DOM 次数，提高整体渲染性能。直接操作 DOM 是昂贵的，虚拟 DOM 可以在内存中高效地进行计算和对比。")]),v._v(" "),_("li",[v._v("跨平台兼容：虚拟 DOM 促进了跨平台的实现，它不仅可以在浏览器环境中运作，还能应用在服务器端渲染、移动端等不同环境。")]),v._v(" "),_("li",[v._v("开发效率：使得开发者可以通过声明式编程风格专注于状态的变化，不需要手动优化 DOM 操作，从而提高开发效率。")])])])}),[],!1,null,null,null);_.default=D.exports}}]);