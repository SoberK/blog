(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{415:function(_,e,v){"use strict";v.r(e);var a=v(14),l=Object(a.a)({},(function(){var _=this,e=_._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h3",{attrs:{id:"_1-如何开启gzip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何开启gzip"}},[_._v("#")]),_._v(" 1.如何开启gzip")]),_._v(" "),e("p",[e("strong",[e("code",[_._v("Gzip")])]),_._v(" 对文件进行压缩，能大大提高首屏加载速度，对于纯文本文件我们可以至少压缩到原大小的40%。"),e("strong",[_._v("注意：图片最好不要进行gzip压缩！")])]),_._v(" "),e("p",[_._v("在vue项目中安装依赖并将productionGzip改为true，开启Gzip压缩： npm install --save-dev compression-webpack-plugin")]),_._v(" "),e("p",[_._v("Brotli 算法压缩")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('.env.production\n\n\nVITE_COMPRESSION = "gzip"\n\n开启 brotli 压缩\nVITE_COMPRESSION = "brotli"\n')])])]),e("h3",{attrs:{id:"_2-什么是module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是module"}},[_._v("#")]),_._v(" 2.什么是module")]),_._v(" "),e("p",[_._v("webpack 支持的module是指 esmodule、commonJS、AMD、assets")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("ESM")]),_._v(" "),e("p",[_._v("Import、export已这种方式导入导出的事esModule 模式")]),_._v(" "),e("p",[_._v("在package.json中可以设置type：module(ESM)|commonjs  来指定模式")])]),_._v(" "),e("li",[e("p",[_._v("commoJs")]),_._v(" "),e("p",[_._v("Module.export、requried")])])]),_._v(" "),e("h3",{attrs:{id:"_3-webpack-modules-如何表达自己各种依赖关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-webpack-modules-如何表达自己各种依赖关系"}},[_._v("#")]),_._v(" 3.webpack modules，如何表达自己各种依赖关系？")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("ESM import")])]),_._v(" "),e("li",[e("p",[_._v("commonjs require")])]),_._v(" "),e("li",[e("p",[_._v("amd define")])]),_._v(" "),e("li",[e("p",[_._v("css/less/sass  @import")]),_._v(" "),e("p",[_._v("就是导入的语句")])])]),_._v(" "),e("h3",{attrs:{id:"_4-我们常说的chunk和boundle-的区-重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-我们常说的chunk和boundle-的区-重要"}},[_._v("#")]),_._v(" 4.我们常说的chunk和boundle 的区 （重要）")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("chunk 是webpack中打包``过程中`的概念")]),_._v(" "),e("p",[_._v("Webpack 的打包是从一个入口的模块开始，入口引用其他模块，其他模块引入其他模块......")]),_._v(" "),e("p",[_._v("webpack通过应用关系逐个打包，这些module就行程了一个chunk。")]),_._v(" "),e("p",[_._v("如果又多个入口模块，可能回产出多个打包路径，每条路径都会形成一个chunk")])]),_._v(" "),e("li",[e("p",[_._v("boundle 是webpack中打包"),e("code",[_._v("结果中")]),_._v("的概念")])]),_._v(" "),e("li",[e("p",[_._v("chunk和Boundle的关系事什么？")]),_._v(" "),e("p",[_._v("大多数情况下，一个chunk会产生一个boundle")])]),_._v(" "),e("li",[e("p",[_._v("split chunk")])])]),_._v(" "),e("h3",{attrs:{id:"_5-plugin-和loader区别是什么-怎么工作的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-plugin-和loader区别是什么-怎么工作的"}},[_._v("#")]),_._v(" 5.plugin 和loader区别是什么？怎么工作的")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("loader")]),_._v(" "),e("p",[_._v("本质上webpack loader 将所有的类型的文件，转换成程序的***依赖图*** 可以直接引用的模块。")])]),_._v(" "),e("li",[e("p",[_._v("plugin")]),_._v(" "),e("p",[_._v("扩展插件，webpack 运行阶段，都应光播出相应的事件，插件去监听对应的事件")])]),_._v(" "),e("li",[e("p",[_._v("compiler")]),_._v(" "),e("p",[_._v("对象，包含了webpak 环境所有的配置信息，包括了options、loader、plugin.webpack启动的时候的实例化，它在全局是唯一的，可以把它理解为webpack的实例")])]),_._v(" "),e("li",[e("p",[_._v("complication")]),_._v(" "),e("p",[_._v("包含了当前的模块资源，编译生成资源")]),_._v(" "),e("p",[_._v("Webpack 在开发模式下运行的时候，每当检测一个文件变化，就会创建一次complication")])])]),_._v(" "),e("h3",{attrs:{id:"_6-能简单描述一下webpack的打包过程嘛"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-能简单描述一下webpack的打包过程嘛"}},[_._v("#")]),_._v(" 6.能简单描述一下webpack的打包过程嘛？")]),_._v(" "),e("ol",[e("li",[_._v("初始化参数：shell webpack.config.js")]),_._v(" "),e("li",[_._v("开始编译：初始化一个compire对象，家在所有的配置，开始执行编译")]),_._v(" "),e("li",[_._v("确定入口：更具entery中的配置，找出所有文件的入口")]),_._v(" "),e("li",[_._v("编译模块：从入口文件开始，调用所有loader，再去递归的去找依赖")]),_._v(" "),e("li",[_._v("完成模块的编译：得到每个模块被编译后的最终内容以及他们之间的依赖关系。（依赖图）")]),_._v(" "),e("li",[_._v("输出资源：更具得到的依赖关系，组装成一个个包含多个module的chunk")]),_._v(" "),e("li",[_._v("输出完成：更具配置，确定要输出的文件名以及文件路径")])])])}),[],!1,null,null,null);e.default=l.exports}}]);