(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{314:function(e,n,t){"use strict";t.r(n);var a=t(14),d=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"mongo-数据库学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mongo-数据库学习"}},[e._v("#")]),e._v(" mongo 数据库学习")]),e._v(" "),n("h2",{attrs:{id:"docker-安装mongo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装mongo"}},[e._v("#")]),e._v(" docker 安装mongo")]),e._v(" "),n("h3",{attrs:{id:"设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置"}},[e._v("#")]),e._v(" 设置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//创建映射目录\nsudo mkdir -p /usr/local/mongodb/datadb\n#mongodb下面所有子目录给予777权限\nsudo chmod 777 -R /usr/local/mongodb/\n\n//创建容器\ndocker run -d --name mongodb -p 27018:27017 -v /usr/local/mongodb/datadb:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin123 --privileged=true --restart always mongo\n\n\n-d 后台运行容器\n–name mongodb 运行容器名\n-p 27018:27017 将容器的27017端口映射到主机的27018端口\n-v /usr/local/mongodb/datadb:/data/db 文件挂载： 本机:容器\n-e MONGO_INITDB_ROOT_USERNAME=admin 指定用户名\n-e MONGO_INITDB_ROOT_PASSWORD=admin123 指定密码\n–privileged=true 使得容器内的root拥有真正的root权限\n–restart always 跟随docker一起启动，即docker启动时会自动运行容器\nmongo 运行的镜像名字\n//进入容器\ndocker exec -it  mongodb  mongosh \n//验证身份\ndb.auth("admin","admin123456");\n\n\n\n')])])]),n("h2",{attrs:{id:"数据库学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库学习"}},[e._v("#")]),e._v(" 数据库学习")]),e._v(" "),n("h3",{attrs:{id:"数据库操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[e._v("#")]),e._v(" 数据库操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("+ show dbs 展示所有的数据库\n+ use databaseName 创建数据库名称\n+ db.dropDatabase() 删除数据库\n")])])]),n("h3",{attrs:{id:"表操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表操作"}},[e._v("#")]),e._v(" 表操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("+ show tables 查看所有集合\n+ db.createCollection(name,options) 创建集合\n+ db.runoob.drop() 删除集合\n")])])]),n("h3",{attrs:{id:"文档操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文档操作"}},[e._v("#")]),e._v(" 文档操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('+ 插入\n    + db.runoob.insert/insertOne({"name":"菜鸟"}) 插入数据\n    + db.runoob.insertMany([{"name":"菜鸟"}])\n    + db.collection.update()与该 选项一起使用时。upsert: true\n    + db.collection.updateOne()与该选项一起使用时。upsert: true\n    + db.collection.updateMany()与该选项一起使用时。upsert: true\n    + db.collection.findAndModify()与该选项一起使用时。upsert: true\n    + db.collection.findOneAndUpdate()与该选项一起使用时 。upsert: true\n    + db.collection.findOneAndReplace()与该选项一起使用时 。upsert: true\n    + db.collection.save()。\n    + db.collection.bulkWrite()。\n+ 查询操作\n    + db.table.find(query,project) 查询\n    + db.table.find().pretty() 美化\n    + db.col.find({"by":"菜鸟教程"}).pretty() 条件搜索等于 by = \'菜鸟\'\n    + db.col.find({"likes":1},{id:1,like:1}).pretty()\t条件搜索等于 where likes 为1的选取like和id字段\n    + db.col.find({"likes":{$lt:50}}).pretty()\t条件搜索等于 where likes < 50\n    + db.col.find({"likes":{$lte:50}}).pretty()\t条件搜索等于 where likes <= 50\n    + db.col.find({"likes":{$gt:50}}).pretty()\t条件搜索等于 where likes > 50\n    + db.col.find({"likes":{$gte:50}}).pretty()\t条件搜索等于 where likes >= 50\n    + db.col.find({"likes":{$ne:50}}).pretty()\t条件搜索等于 where likes != 50\n    + db.col.find({key1:value1, key2:value2}).pretty() 查询多个\n    + db.col.find( { $or: [ {key1: value1}, {key2:value2} ] } ).pretty() 或者条件查询\n    + db.col.find({"likes": {$gt:50}, $or: [{"by": "菜鸟教程"},{"title": "MongoDB 教程"}]}).pretty()  \n    + db.COLLECTION_NAME.find().limit(NUMBER)  获取 LIMIT 数量的记录\n    + db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER) 跳过 SKIP 数量的记录\n    + db.COLLECTION_NAME.find().sort({KEY:1}) 排序 1正序 -1倒序\n    + db.COLLECTION_NAME.find({type:/so/}) 正则\n+ 更新文件\n    + db.collection.update/updateMany/updateOne(query,update,options)\n    + query : update的查询条件，类似sql update查询内where后面的。\n    + update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n    + upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n    + multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n    + writeConcern :可选，抛出异常的级别。\n    ```\n    db.collection.update(\n        <query>,\n        <update>,\n        {\n            upsert: <boolean>,\n            multi: <boolean>,\n            writeConcern: <document>\n        }\n    )\n    db.students.updateOne( { _id: 3 }, [ { $set: { "test3": 98, modified: "$$NOW"} } ] ) \n    ```\n\n    + $set {$set:{filed:value}} 指定一个键更新值,如不存在就不创建\n    + $unset {$set:{filed:1}} 删除一个键\n    + $inc {$inc:{filed:value}} 对一个值进行增减\n    + $rename {$rename:{old:new}} 丢改字段名称\n    + $push {$push:{filed:value}} 将数值追加到数组中,如数组不存在,会进行初始化\n    + $pushAll {$pushAll:{filed:value_array}} 将多个数值追加到数组中,如数组不存在,会进行初始化\n    + $pull {$pull:{filed:value}} 删除数组中指定的元素\n    + $addToSet {$addToSet:{filed:value}} 添加元素到数组中,具有重排功能\n    + $pop {$pop:{filed:1}} 删除数组中第一个或最后一个元素\n    + $project\n    + $replaceRoot\n    + $replaceWith\n\n    ```\n    //标准化字段\n        db.students2.updateMany( {},  \n            [\n                { $replaceRoot: { newRoot:\n                { $mergeObjects: [ { quiz1: 0, quiz2: 0, test1: 0, test2: 0 }, "$$ROOT" ] }\n                } },\n                { $set: { modified: "$$NOW"}  }\n            ]\n        )\n\n    ```\n+ 替换文档\n    + db.collection.replace()是直接替换整个文档\n+ 查找修改\n    + db.collection.findAndModify({query:<query>,update:<update>,new:true}) 返回修改后的值\n+ 删除文件\n    + db.collection.remove/deleteOne(<query>,options)\n    + justOne : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n    + writeConcern :（可选）抛出异常的级别。\n    + findOneAndDelete({tyep:""}) 删除并返回删除的文档 \n')])])]),n("h3",{attrs:{id:"索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[e._v("#")]),e._v(" 索引")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("+ db.collection.createIndex(keys, options) 创建索引\n")])])]),n("h3",{attrs:{id:"聚合操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#聚合操作"}},[e._v("#")]),e._v(" 聚合操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("+ db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)")])])])])}),[],!1,null,null,null);n.default=d.exports}}]);