(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{385:function(e,r,t){"use strict";t.r(r);var a=t(14),v=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"_28-ref和reactive有何差异"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_28-ref和reactive有何差异"}},[e._v("#")]),e._v(" 28.ref和reactive有何差异")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("ref援收内部值 (inner value）返回响应式Ref对象，reactive返回响应式代理对象")])]),e._v(" "),r("li",[r("p",[e._v("从定义上看 ref•通常用于处理单值的响应式，‘reactive’用于处理对象类型的数据响应式")])]),e._v(" "),r("li",[r("p",[e._v("两者均是用于构造响应式数据，但是 ref主要解决原始值的响应式问题")])]),e._v(" "),r("li",[r("p",[e._v("ref返回的响应式数据在JS中使用需要加上^•value°才能访问其值，在视图中使用会自动脱ref， 不需要.value：ref可以接收对象或数组等非原始值，但内部依然是 reactive’实现响应式：reactive内部如果接收Ref对象会自动脱ref：使用展开运算符(…)展开reactive返回的响应式对象会使其失去响应性，可以结合 toRefs0将值转换为Ref对象之后再展开。")])]),e._v(" "),r("li",[r("p",[e._v("reactive内部使用Proxy代理传入对象并拦截该对象各种操作(trap），从而实现响应式。ref内部封装一个Reflmpl类，并设置get value/set value，拦截用户对值的访问，从而实现响应式。")])])])])}),[],!1,null,null,null);r.default=v.exports}}]);