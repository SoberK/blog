(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{310:function(r,e,t){"use strict";t.r(e);var a=t(14),s=Object(a.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"docker-学习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-学习"}},[r._v("#")]),r._v(" docker 学习")]),r._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[r._v("#")]),r._v(" 常用命令")]),r._v(" "),e("h3",{attrs:{id:"容器相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器相关"}},[r._v("#")]),r._v(" 容器相关")]),r._v(" "),e("ul",[e("li",[r._v("docker logs id/name  查看镜像的log")]),r._v(" "),e("li",[r._v("docker stop id/name  停止容器")]),r._v(" "),e("li",[r._v("docker ps 查看docker容器")]),r._v(" "),e("li",[r._v("docker start/restart b750bbbcfd88 启动/重启容器")]),r._v(" "),e("li",[r._v("docker run -it ubuntu /bin/bash 启动容器")]),r._v(" "),e("li",[r._v("docker exec -it 243c32535da7 /bin/bash 进入容器并打开bash")]),r._v(" "),e("li",[r._v("docker rm -f 243c32535da7  删除容器/镜像")]),r._v(" "),e("li",[r._v("docker export 1e560fca3906 > ubuntu.tar 导出容器")]),r._v(" "),e("li",[r._v("docker import ubuntu.tar 导入容器")]),r._v(" "),e("li",[r._v("docker run -d -P training/webapp python app.py 默认端口映射到本地\n"),e("ul",[e("li",[r._v("-P:将容器内部使用的网络端口随机映射到我们使用的主机上。")])])]),r._v(" "),e("li",[r._v("docker run -d -p 5000:5000 training/webapp python app.py 指定端口映射")]),r._v(" "),e("li",[r._v("docker port 70dc8b5bffe0 查看port映射情况")]),r._v(" "),e("li",[r._v("docker top 70dc8b5bffe0 来查看容器内部运行的进程")])]),r._v(" "),e("h3",{attrs:{id:"镜像相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像相关"}},[r._v("#")]),r._v(" 镜像相关")]),r._v(" "),e("ul",[e("li",[r._v("docker images 查看所有镜像")]),r._v(" "),e("li",[r._v("docker pull ubuntu docker拉取容器镜像")]),r._v(" "),e("li",[r._v("docker search httpd 搜索镜像")]),r._v(" "),e("li",[r._v("docker rmi hello-world 删除镜像")])]),r._v(" "),e("h3",{attrs:{id:"网路相关互联"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网路相关互联"}},[r._v("#")]),r._v(" 网路相关互联")]),r._v(" "),e("ul",[e("li",[r._v("docker network ls 查看所有网络")]),r._v(" "),e("li",[r._v("docker network create -d bridge test-net 创建网络\n"),e("ul",[e("li",[r._v("-d:指定模式 有 bridge、overlay。")])])])]),r._v(" "),e("h3",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[r._v("#")]),r._v(" dockerfile")]),r._v(" "),e("ul",[e("li",[r._v("创建一个Dockerfile 文件 ,里面写入")])]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("FROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n")])])]),e("p",[r._v("docker build -t nginx:v3 . 打包当文件到nginx")]),r._v(" "),e("ul",[e("li",[r._v("指令详解:\n后面补起")])]),r._v(" "),e("h3",{attrs:{id:"docker-compose-compose-是用于定义和运行多容器-docker-应用程序的工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-compose-是用于定义和运行多容器-docker-应用程序的工具"}},[r._v("#")]),r._v(" docker compose(Compose 是用于定义和运行多容器 Docker 应用程序的工具)")]),r._v(" "),e("h2",{attrs:{id:"容器的启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器的启动"}},[r._v("#")]),r._v(" 容器的启动")]),r._v(" "),e("h3",{attrs:{id:"运行基本容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行基本容器"}},[r._v("#")]),r._v(" 运行基本容器")]),r._v(" "),e("p",[r._v('docker run ubuntu:15.10 /bin/echo "hello world"')]),r._v(" "),e("h3",{attrs:{id:"运行交互式的容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行交互式的容器"}},[r._v("#")]),r._v(" 运行交互式的容器")]),r._v(" "),e("ul",[e("li",[r._v("-t: 在新容器内指定一个伪终端或终端。")]),r._v(" "),e("li",[r._v("-i: 允许你对容器内的标准输入 (STDIN) 进行交互。")])]),r._v(" "),e("p",[r._v("docker run -i -t ubuntu:15.10 /bin/bash")]),r._v(" "),e("p",[r._v("进入容器打出:exit;退出")]),r._v(" "),e("h3",{attrs:{id:"启动后台容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动后台容器"}},[r._v("#")]),r._v(" 启动后台容器")]),r._v(" "),e("p",[r._v('docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"')])])}),[],!1,null,null,null);e.default=s.exports}}]);