(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{392:function(e,t,n){"use strict";n.r(t);var r=n(14),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"_31-spa和ssr的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-spa和ssr的区别是什么"}},[e._v("#")]),e._v(" 31.spa和SSr的区别是什么")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("SPA (Single Page Application）即单页面应用。一般也称为 客户端渲染 (Client Side Render)，简称CSR。 SSR (Server Side Render）即 服务端渲染。一般也称为 多页面应用 (Mulpile Page Application)\n简称 MPA。")])]),e._v(" "),t("li",[t("p",[e._v("SPA应用只会首次请求html文件，后续只需要请求JSON数据即可，因此用户体验更好，节约流量，服务端压力也较小。但是首屏加载的时间会变长，而且SEO不友好。为了解决以上缺点，就有了SSR方案，由于HTML\n内容在服务器一次性生成出来，首屏加载快，搜索引!擎也可以很方便的抓取页面信息。但同时SSR方案也会有性能，开发受限等问题。")])]),e._v(" "),t("li",[t("p",[e._v("在选择上，如果我们的应用存在首屏加载优化需求，SEO需求时，就可以考虑SSR。")])]),e._v(" "),t("li",[t("p",[e._v("但并不是只有这一种替代方案，比如对一些不常变化的静态网站，SSR反而浪费资源，我们可以考虑预渲染(prerender） 方案。另外nuxtjs/next.js中给我们提供了SSG (Static Site Generate）静态网站生成方案也是很好的静态站点解決方案，结合一些Cl手段，可以起到很好的优化效果，且能节约资源")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);