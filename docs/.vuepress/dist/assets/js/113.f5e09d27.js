(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{394:function(e,f,t){"use strict";t.r(f);var u=t(14),v=Object(u.a)({},(function(){var e=this,f=e._self._c;return f("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[f("h3",{attrs:{id:"_8-说一说对vue响应式的理解"}},[f("a",{staticClass:"header-anchor",attrs:{href:"#_8-说一说对vue响应式的理解"}},[e._v("#")]),e._v(" 8.说一说对vue响应式的理解")]),e._v(" "),f("p",[e._v("1.所谓数据响应式就是能够使数据变化可以被检测并对这种变化做出响应的机制。\n2.MVVM框架中要解决的一个核心问题是连接数据层和视图层，通过数据驱动应用，数据变化，视图更新，要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。")]),e._v(" "),f("p",[e._v("3.\ufeff\ufeff\ufeff以vue为例说明，通过数据响应式加上虚拟DOM和patch算法，开发人员只需要操作数据，关心业务，完全不用接触繁琐的DOM操作，从而大大提升开发效率，降低开发难度")]),e._v(" "),f("p",[e._v("4.\ufeff\ufeff\ufeffvue2中的数据响应式会根据数据类型来做不同处理，如果是对象则采用Object.definePropertyD的方式定义数据拦截，当数据被访问或发生变化时，我们感知并作出响应；如果是数组则通过覆盖数组对象原型的7个变更方法，使这些方法可以额外的做更新通知，从而作出响应。这种机制很好的解决了数据响应化的问题，但在实际使用中也存在一些缺点：比如初始化时的递归遍历会造成性能损失；新增或删除属性时需要用户使用")]),e._v(" "),f("p",[e._v("5.vue.set/delete这样特殊的api才能生效；对于es6中新产生的Map、Set这些数据结构不支持等问题。")]),e._v(" "),f("p",[e._v("6.\ufeff\ufeff\ufeff为了解决这些问题，vue3重新编写了这一部分的实现：利用ES6的Proxy代理要响应化的数据，它有很多好处，编程体验是一致的，不需要使用特殊api，初始化性能和内存消耗都得到了大幅改善；另外由于响应化实现代码抽取为独立的reactivity包，使得我们可以更灵活的使用它，第三方的扩展开发起来更加灵活了。")])])}),[],!1,null,null,null);f.default=v.exports}}]);